streams 1;

-- Helper functions from standard library
[int] -> [int] -> [(int,int)] zip;
zip = \([int] list1) -> {
    \([int] list2) -> {
        if((isEmpty list1) || (isEmpty list2)) {
            return [];
        }
        else {
            return (head list1, head list2) cons (zip (tail list1) (tail list2));
        }
    };
};

[int] -> int -> [int] append;
append = \([int] list) -> {
    \(int element) -> {
        [int] retVal;
        if (isEmpty list) {
            retVal =  element cons [];
        } else {
            retVal = (head list) cons (append (tail list) element);
        }
        return retVal;
    };
};

[(int,int)]->((int,int)->int)->[int] map;
map = \([(int,int)] list) -> {
	\((int,int)->int fun) -> {
		if(isEmpty list) {
			return [];
		}
		else {
			return (fun (head list)) cons (map (tail list) fun);
		}
	};
};

(int,int)-> int multiplyTuple;
multiplyTuple = \((int, int) pair) -> {
    return (fst pair) * (snd pair);
};

[int] -> int sum;
sum = \([int] ls) -> {
    int retVal;
    if (isEmpty ls) {
        retVal = 0;
    } else {
        retVal = (head ls) + sum (tail ls);
    }
    return retVal;
};

-- returns size of list
int sizeof ([int] list)
{
    int length;
    length = 0;
    while(!(isEmpty list))
    {
        length = length + 1;
        list = tail list;
    }
    return length;
}

[int] fibonacci = 1 cons (1 cons []);
int a0 = 1;
int a1 = 1;

int counter = 1;
[int] input = [];
while(true) {
    -- generate new fibonacci number
    if((sizeof fibonacci) < counter ) {
        int tmp;
        tmp = a1;
        a1 = a1 + a0;
        a0 = tmp;
        fibonacci = a1 cons fibonacci;
    }

    -- get new number from the input
    input = append input (consume 0);

    -- pair the fibonacci numbers as coefficients with all the numbers from input
    print sum (map (zip (fibonacci) input) multiplyTuple);

    counter = counter + 1;
}